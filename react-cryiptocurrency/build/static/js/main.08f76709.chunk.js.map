{"version":3,"sources":["cryptomonedas.png","hooks/useCurrency.js","hooks/useCrypto.js","components/Error.jsx","components/Formulario.jsx","App.js","index.js"],"names":["Label","styled","label","Select","select","useCurrency","stateInicial","options","useState","state","setState","onChange","e","target","value","map","option","code","name","useCrypto","CoinInfo","Name","FullName","Id","ErrorMessage","p","Error","message","Button","input","Formulario","setCoin","setCrypto","cryptocoins","setCryptocoins","error","setError","currency","SelectCurrency","crypto","SelectCrypto","useEffect","a","axios","get","result","data","Data","apiRequest","onSubmit","preventDefault","type","Contenedor","div","Image","img","Heading","h1","App","coin","url","response","console","dir","DISPLAY","gettingCoinValue","src","image","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08f76709.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cryptomonedas.51f1d2ed.png\";","import styled from '@emotion/styled';\r\nimport React, { Fragment, useState } from 'react'\r\n\r\nconst Label = styled.label`\r\n\tfont-family: 'Bebas Neue', cursive;\r\n\tcolor: #fff;\r\n\ttext-transform: uppercase;\r\n\tfont-weight: bold;\r\n\tfont-size: 2.5rem;\r\n\tmargin-top: 2rem;\r\n\tdisplay: block;\r\n\t`;\r\nconst Select = styled.select`\r\n\twidth: 100%;\r\n\tdisplay: block;\r\n\tpadding: 1rem;\r\n\t-webkit-appearance: none;\r\n\tborder-radius: 10px;\r\n\tborder: none;\r\n\tfont-size: 1.2rem;\r\n\t`;\r\n\r\n\r\nconst useCurrency = (label, stateInicial, options) => {\r\n\r\n\tconst [state, setState] = useState(stateInicial);\r\n\r\n\tconst SelectCurrency = () => (\r\n\t\t<Fragment>\r\n\t\t\t<Label>{label}</Label>\r\n\t\t\t\t<Select \r\n\t\t\t\t\tonChange={ e => (setState( e.target.value ))}\r\n\t\t\t\t\tvalue={state}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<option value=''>--Select Currency--</option>\r\n\t\t\t\t\t{options.map(option => (\r\n\t\t\t\t\t\t<option key={option.code} value={option.code}>{option.name}</option>\r\n\t\t\t\t\t)) }\r\n\t\t\t\t</Select>\r\n\t\t</Fragment>\r\n\t)\r\n\r\n\treturn [state, SelectCurrency, setState];\r\n\r\n}\r\n\r\nexport default useCurrency;\r\n","import styled from '@emotion/styled';\r\nimport React, { Fragment, useState } from 'react'\r\n\r\nconst Label = styled.label`\r\n\tfont-family: 'Bebas Neue', cursive;\r\n\tcolor: #fff;\r\n\ttext-transform: uppercase;\r\n\tfont-weight: bold;\r\n\tfont-size: 2.5rem;\r\n\tmargin-top: 2rem;\r\n\tdisplay: block;\r\n\t`;\r\nconst Select = styled.select`\r\n\twidth: 100%;\r\n\tdisplay: block;\r\n\tpadding: 1rem;\r\n\t-webkit-appearance: none;\r\n\tborder-radius: 10px;\r\n\tborder: none;\r\n\tfont-size: 1.2rem;\r\n\t`;\r\n\r\n\r\nconst useCrypto = (label, stateInicial, options) => {\r\n\tconst [state, setState] = useState(stateInicial);\r\n\r\n\tconst SelectCrypto = () => (\r\n\t\t<Fragment>\r\n\t\t\t<Label>{label}</Label>\r\n\t\t\t\t<Select \r\n\t\t\t\t\tonChange={ e => (setState( e.target.value ))}\r\n\t\t\t\t\tvalue={state}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<option value=''>--Select Crypto--</option>\r\n\t\t\t\t\t{options.map(option => (\r\n\t\t\t\t\t\t<option key={option.CoinInfo.Id} value={option.CoinInfo.Name}>{option.CoinInfo.FullName}</option>\r\n\t\t\t\t\t)) }\r\n\t\t\t\t</Select>\r\n\t\t</Fragment>\r\n\t)\r\n\r\n\treturn [state, SelectCrypto, setState];\r\n\r\n}\r\n\r\nexport default useCrypto;\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst ErrorMessage = styled.p`\r\n\tbackground-color: #b7322c;\r\n\tpadding: 1rem;\r\n\tcolor: #fff;\r\n\tfont-size: 30px;\r\n\ttext-transform: uppercase;\r\n\tfont-weight: bold;\r\n\ttext-align: center;\r\n\tfont-family: 'Bebas Neue', cursive;\r\n\tborder-radius: 13px;\r\n\tletter-spacing: 3px;\r\n\t\r\n\t`;\r\n\r\nconst Error = ({message}) => {\r\n\treturn (\r\n\t\t<ErrorMessage>{message}</ErrorMessage>\r\n\t)\r\n}\r\n\r\nexport default Error\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from '@emotion/styled';\r\nimport useCurrency from '../hooks/useCurrency';\r\nimport useCrypto from '../hooks/useCrypto';\r\nimport Error from './Error';\r\nimport axios from 'axios';\r\n\r\n// Styles for the components  \r\nconst Button = styled.input`\r\n\tmargin-top: 20px;\r\n\tfont-weight: bold;\r\n\tfont-size: 20px;\r\n\tpadding: 10px;\r\n\tbackground-color: #66a2fe;\r\n\tborder: none;\r\n\twidth: 100%;\r\n\tborder-radius: 10px;\r\n\tcolor: #fff;\r\n\ttransition: background-color .3s ease;\r\n\t\r\n\t&:hover{\r\n\t\tbackground-color: #326ac0;\r\n\t\tcursor: pointer;\r\n\t}`\r\n\r\n\r\nconst Formulario = ({setCoin, setCrypto}) => {\r\n\r\n\t// Creating state for the list of cryptocoins\r\n\tconst [ cryptocoins, setCryptocoins] = useState([])\r\n\tconst [ error, setError] = useState(false);\r\n\r\n\tconst CURRENCIES = [\r\n\t\t{ code: 'USD', name: 'US Dollar'},\r\n\t\t{ code: 'MXN', name: 'Mexican Peso'},\r\n\t\t{ code: 'EUR', name: 'Euro'},\r\n\t\t{ code: 'GBP', name: 'English Pound'},\r\n\t];\r\n\r\n\t// using custom hook useCurrency\r\n\tconst [currency, SelectCurrency] = useCurrency('Select Currency', '', CURRENCIES );\r\n\r\n\t// using custom hook useCrypto\r\n\tconst [crypto, SelectCrypto] = useCrypto('Select Crypto', '', cryptocoins);\r\n\r\n\t// Call to API\r\n\tuseEffect(() => {\r\n\t\tconst apiRequest = async () => {\r\n\t\t\tconst url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD'\r\n\r\n\t\t\tconst result = await axios.get(url);\r\n\t\t\tsetCryptocoins(result.data.Data);\r\n\t\t} \r\n\t\tapiRequest()\r\n\t}, [])\r\n\r\n\t// When submit\r\n\tconst valueCoin = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\t// Validate fields\r\n\t\tif ( currency === '' | crypto === '' ){\r\n\t\t\tsetError(true);\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tsetError(false);\r\n\t\tsetCoin(currency);\r\n\t\tsetCrypto(crypto)\r\n\r\n\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form \r\n\t\t\tonSubmit={valueCoin}\r\n\t\t>\r\n\t\t\t{ error ? <Error message=\"All the fields are required\" /> : null}\r\n\t\t\t<SelectCurrency />\r\n\t\t\t<SelectCrypto />\r\n\t\t\t<Button \r\n\t\t\t\ttype=\"submit\"\r\n\t\t\t\tvalue=\"Calculate\"\r\n\t\t\t/>\r\n\t\t</form>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default Formulario\r\n","import styled from '@emotion/styled';\nimport image from './cryptomonedas.png';\nimport Formulario from './components/Formulario';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media(min-width: 992px){\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Image = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n  `;\n\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue', cursive;\n  color: #fff;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after {\n    content: '';\n    width: 100px;\n    height: 16px;\n    background-color: #66A2FE;\n    display: block;\n    margin-top:-21px;\n    z-index: -3;\n  }\n  `;\n\n\n\nfunction App() {\n\n  const [coin , setCoin ] = useState('')\n  const [crypto, setCrypto] = useState('')\n\n  useEffect(() => {\n\n      const gettingCoinValue = async() => {\n        // To prevent firstime execution\n        if (coin === '') return ;\n        const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${crypto}&tsyms=${coin}`;\n\n        const response = await axios.get(url);\n\n        console.dir(response.data.DISPLAY)\n      }\n\n      gettingCoinValue()\n  }, [coin, crypto])\n   \n  return (\n    <Contenedor>\n      <div>\n        <Image\n          src={image}\n          alt=\"crypto image\"\n        />\n      </div>\n      <div>\n        <Heading>Instant Cryptocurrency Prices</Heading>\n        <Formulario \n          setCoin={setCoin}\n          setCrypto={setCrypto}\n        />\n      </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}